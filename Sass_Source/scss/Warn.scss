/*
*************** 
Education Sass üë®üèΩ‚Äç‚öñÔ∏è with SourceCode üòâ 
developer : Ahmad hadizadeh website 
Https: //Asancode.com
*************** 
*/


/* 
When writing mixins and functions,
you may want to discourage users from passing certain arguments or certain values. They may be passing legacy arguments that are now deprecated,
or they may be calling your API in a way that‚Äôs not quite optimal. The @warn rule is designed just for that. It‚Äôs written @warn <expression>and it prints the value of the expression (usually a string) for the user,
along with a stack trace indicating how the current mixin or function was called. Unlike the @error rule,
though,
it doesn‚Äôt stop Sass entirely.


*/



@mixin test($color) {
    $msg1: "value is Goooooooood ";
    $msg2: "value Not Correcttttt ";
    $default: blue;

    @if($default==$color) {
        @warn "input : #{$msg1}";
    }

    @else {
        @warn "input : #{$msg2}";
    }

}

h3 {
    @include test(red);
}


$known-prefixes: webkit, moz, ms, o;

@mixin prefix($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if not index($known-prefixes, $prefix) {
            @warn "Unknown prefix #{$prefix}.";
        }

        -#{$prefix}-#{$property}: $value;
    }

    #{$property}: $value;
}

.tilt {
    // Oops, we typo'd "webkit" as "wekbit"!
    @include prefix(transform, rotate(15deg), wekbit ms);
}